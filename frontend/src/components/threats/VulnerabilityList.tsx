import React from 'react'
import { AlertTriangle, CheckCircle, XCircle, Eye, Shield } from 'lucide-react'

interface Vulnerability {
  id: string
  title: string
  description: string
  severity: 'critical' | 'high' | 'medium' | 'low'
  status: 'open' | 'resolved' | 'ignored'
  file: string
  line: number
  type: string
  discoveredAt: string
}

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[]
  onVulnerabilityUpdate?: (id: string, updates: Partial<Vulnerability>) => void
}

export const VulnerabilityList: React.FC<VulnerabilityListProps> = ({ vulnerabilities, onVulnerabilityUpdate }) => {
  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-400/10 border-red-400/20'
      case 'high': return 'text-orange-400 bg-orange-400/10 border-orange-400/20'
      case 'medium': return 'text-yellow-400 bg-yellow-400/10 border-yellow-400/20'
      case 'low': return 'text-blue-400 bg-blue-400/10 border-blue-400/20'
      default: return 'text-gray-400 bg-gray-400/10 border-gray-400/20'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'resolved': return <CheckCircle className="h-4 w-4 text-green-400" />
      case 'ignored': return <Eye className="h-4 w-4 text-gray-400" />
      default: return <AlertTriangle className="h-4 w-4 text-yellow-400" />
    }
  }

  return (
    <div className="space-y-4">
      {vulnerabilities.length === 0 ? (
        <div className="text-center py-8 bg-gray-800 rounded-lg">
          <Shield className="h-12 w-12 text-gray-600 mx-auto mb-3" />
          <p className="text-gray-400">No vulnerabilities found</p>
        </div>
      ) : (
        vulnerabilities.map(vuln => (
          <div key={vuln.id} className="bg-gray-800 rounded-lg p-4 hover:bg-gray-800/80 transition-colors">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center gap-3 mb-2">
                  <span className={`px-2 py-1 rounded text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                    {vuln.severity.toUpperCase()}
                  </span>
                  <span className="text-sm text-gray-400">{vuln.type}</span>
                  {getStatusIcon(vuln.status)}
                </div>
                <h3 className="text-white font-medium mb-1">{vuln.title}</h3>
                <p className="text-gray-400 text-sm mb-2">{vuln.description}</p>
                <div className="flex items-center gap-4 text-xs text-gray-500">
                  <span>{vuln.file}:{vuln.line}</span>
                  <span>Discovered {new Date(vuln.discoveredAt).toLocaleDateString()}</span>
                </div>
              </div>
              {vuln.status === 'open' && onVulnerabilityUpdate && (
                <div className="flex gap-2 ml-4">
                  <button
                    onClick={() => onVulnerabilityUpdate(vuln.id, { status: 'resolved' })}
                    className="px-3 py-1 text-xs bg-green-500/20 text-green-400 rounded hover:bg-green-500/30 transition-colors"
                  >
                    Resolve
                  </button>
                  <button
                    onClick={() => onVulnerabilityUpdate(vuln.id, { status: 'ignored' })}
                    className="px-3 py-1 text-xs bg-gray-600/20 text-gray-400 rounded hover:bg-gray-600/30 transition-colors"
                  >
                    Ignore
                  </button>
                </div>
              )}
            </div>
          </div>
        ))
      )}
    </div>
  )
}
